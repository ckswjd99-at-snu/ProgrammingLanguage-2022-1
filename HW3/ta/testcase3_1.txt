[Header]
open K
open Unix

let test_run pgm_str = 
  let pgm = Parser.program Lexer.start (Lexing.from_string pgm_str) in
  K.run (K.emptyMemory, K.emptyEnv, pgm)

let test_error_str pgm_str = 
  let pgm = Parser.program Lexer.start (Lexing.from_string pgm_str) in
  try 
    (try let _ =  K.run (K.emptyMemory, K.emptyEnv, pgm) in "" with
    K.Error s -> String.sub s 0 7)
  with Invalid_argument _ -> ""

let redirect_f = "stdout_redirect.txt"

let test_output pgm_str = 
  (* Stdout Redirection *)
  let new_stdout = open_out redirect_f in
  let _ = Unix.dup2 (Unix.descr_of_out_channel new_stdout) Unix.stdout in
  let pgm = Parser.program Lexer.start (Lexing.from_string pgm_str) in
  let _ = K.run (K.emptyMemory, K.emptyEnv, pgm) in
  let _ = flush_all() in (* Current stdout channel must be flushed *)
  let _ = close_out new_stdout in 

  let result_chan = open_in redirect_f in
  really_input_string result_chan (in_channel_length result_chan)


[Test]
(* 1. let, arithmetic *)
test_output
"
let x := 5 in
let y := 10 in
write ((x - 2) * 4 + y / 5)
"

[Value]
"14\n"


[Test]
(* 2. branch, sequence, write *)
test_output
"
if (3 < 5) then (
  write 1;
  if (not false) then (
    write 11;
    if (20 < 10) then 
      write 111
    else 
      write 222
  )
  else 
    write 22
)
else 
  unit
"

[Value]
"1\n11\n222\n"


[Test]
(* 3. assignment, type error *)
test_error_str
"
let x := 1 in 
let y := 2 in
x:= true;
x + y
"

[Value]
"TypeErr"


[Test]
(* 4. While + LetV *)
test_output
"let x := 1 in
let sum := 0 in
while (x < 11) do (
   sum := sum + x;
   x := x + 1
); write sum"

[Value]
"55\n"


[Test]
(* 5. Exception in false branch *)
test_output
"
if 3 < 2 then
  unit
else (
	if (unit = 3) then
	  x
	else 
    write 25
)
"

[Value]
"25\n"


[Test]
(* 6. Result of Assign *)
test_output
"
let x := () in
let y := () in
let z := () in
if ((x := 1) + (y := 2) + (z := 3) = 6) then write (x + y + z) else unit
"

[Value]
"6\n"


[Test]
(* 7. Scope *)
test_output
"
let x := 0 in
let z :=
  (let x := 1 in (x := 5); ((x := x + 1) * (let x := 2 in (x := x + 1)))) +
  (let y := 2 in 2 * x)
in 
write z
"

[Value]
"18\n"


[Test]
(* 8. Unbound variable *)
test_error_str
"
write x
"

[Value]
"Unbound"
