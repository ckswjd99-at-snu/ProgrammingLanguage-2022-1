type token =
  | UNIT
  | NUM of (int)
  | TRUE
  | FALSE
  | ID of (string)
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EQUAL
  | LB
  | RB
  | LBLOCK
  | RBLOCK
  | NOT
  | COLONEQ
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | END
  | WHILE
  | DO
  | FOR
  | TO
  | LET
  | IN
  | READ
  | WRITE
  | PROC
  | LP
  | RP
  | EOF

open Parsing;;
let _ = parse_error;;
# 8 "parser.mly"
       
type declLet = Val of string * K.K.exp
             | Fun of string * string * K.K.exp

exception ParsingError
let rec desugarLet: declLet * K.K.exp -> K.K.exp  =
  fun (l, e) -> 
    match l with
    Val(x, e') -> K.K.LETV(x,e',e)
    | Fun(f,x,e') -> K.K.LETF(f,x,e',e)
# 50 "parser.ml"
let yytransl_const = [|
  257 (* UNIT *);
  259 (* TRUE *);
  260 (* FALSE *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* STAR *);
  265 (* SLASH *);
  266 (* EQUAL *);
  267 (* LB *);
  268 (* RB *);
  269 (* LBLOCK *);
  270 (* RBLOCK *);
  271 (* NOT *);
  272 (* COLONEQ *);
  273 (* SEMICOLON *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* END *);
  278 (* WHILE *);
  279 (* DO *);
  280 (* FOR *);
  281 (* TO *);
  282 (* LET *);
  283 (* IN *);
  284 (* READ *);
  285 (* WRITE *);
  286 (* PROC *);
  287 (* LP *);
  288 (* RP *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  258 (* NUM *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\002\000\001\000\001\000\001\000\002\000\
\001\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\002\000\003\000\003\000\006\000\004\000\008\000\004\000\
\002\000\002\000\003\000\007\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\005\000\006\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\004\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\013\000\014\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yydgoto = "\002\000\
\017\000\018\000\028\000"

let yysindex = "\007\000\
\105\255\000\000\000\000\000\000\000\000\000\000\247\254\007\255\
\105\255\105\255\105\255\008\255\251\254\018\255\105\255\067\255\
\000\000\197\000\105\255\105\255\000\000\000\000\198\255\144\255\
\252\254\019\255\021\255\009\255\000\000\224\255\000\000\010\255\
\105\255\105\255\105\255\105\255\105\255\105\255\105\255\000\000\
\224\255\045\255\105\255\105\255\105\255\105\255\006\255\105\255\
\000\000\250\254\250\254\000\000\000\000\094\255\072\255\224\255\
\000\000\183\255\224\255\131\255\212\255\039\255\212\255\000\000\
\105\255\105\255\013\255\224\255\165\255\036\255\105\255\105\255\
\224\255\212\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\047\000\000\000\000\000\065\000\076\000\118\000\
\000\000\000\000\132\000\000\000\022\255\000\000\170\000\000\000\
\000\000\000\000\000\000\146\000\000\000\000\000\000\000\000\000\
\160\000\023\255"

let yygindex = "\000\000\
\000\000\251\255\000\000"

let yytablesize = 470
let yytable = "\026\000\
\009\000\035\000\036\000\022\000\023\000\024\000\019\000\001\000\
\021\000\030\000\032\000\045\000\025\000\041\000\042\000\033\000\
\034\000\035\000\036\000\037\000\038\000\020\000\029\000\011\000\
\027\000\047\000\039\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\046\000\048\000\062\000\058\000\059\000\060\000\
\061\000\049\000\063\000\067\000\070\000\072\000\012\000\000\000\
\027\000\028\000\033\000\034\000\035\000\036\000\037\000\038\000\
\000\000\000\000\000\000\068\000\069\000\039\000\000\000\000\000\
\015\000\073\000\074\000\003\000\004\000\005\000\006\000\007\000\
\000\000\008\000\000\000\016\000\057\000\033\000\034\000\035\000\
\036\000\009\000\000\000\064\000\010\000\000\000\000\000\000\000\
\011\000\026\000\012\000\000\000\013\000\000\000\014\000\015\000\
\000\000\016\000\031\000\033\000\034\000\035\000\036\000\019\000\
\000\000\003\000\004\000\005\000\006\000\007\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\009\000\
\000\000\000\000\010\000\000\000\000\000\000\000\011\000\000\000\
\012\000\000\000\013\000\022\000\014\000\015\000\000\000\016\000\
\033\000\034\000\035\000\036\000\037\000\038\000\000\000\000\000\
\000\000\021\000\000\000\039\000\000\000\033\000\034\000\035\000\
\036\000\037\000\038\000\066\000\000\000\000\000\000\000\023\000\
\039\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
\000\000\024\000\033\000\034\000\035\000\036\000\037\000\038\000\
\000\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\071\000\033\000\034\000\035\000\036\000\
\037\000\038\000\000\000\000\000\040\000\000\000\000\000\039\000\
\000\000\000\000\065\000\033\000\034\000\035\000\036\000\037\000\
\038\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\043\000\033\000\034\000\035\000\036\000\037\000\038\000\000\000\
\000\000\000\000\000\000\000\000\039\000\033\000\034\000\035\000\
\036\000\037\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\000\000\000\000\000\000\
\000\000\009\000\000\000\009\000\009\000\000\000\000\000\009\000\
\000\000\009\000\000\000\009\000\000\000\011\000\011\000\000\000\
\009\000\011\000\011\000\011\000\000\000\000\000\000\000\000\000\
\011\000\000\000\011\000\011\000\000\000\000\000\011\000\000\000\
\011\000\000\000\011\000\000\000\012\000\012\000\000\000\011\000\
\012\000\012\000\012\000\000\000\000\000\000\000\000\000\012\000\
\000\000\012\000\012\000\000\000\000\000\012\000\000\000\012\000\
\000\000\012\000\015\000\015\000\015\000\000\000\012\000\000\000\
\000\000\015\000\000\000\015\000\015\000\016\000\016\000\015\000\
\000\000\015\000\000\000\015\000\016\000\000\000\016\000\016\000\
\015\000\000\000\016\000\000\000\016\000\026\000\016\000\000\000\
\000\000\000\000\026\000\016\000\026\000\026\000\000\000\000\000\
\026\000\000\000\026\000\019\000\026\000\000\000\000\000\000\000\
\019\000\026\000\019\000\019\000\000\000\000\000\019\000\000\000\
\019\000\020\000\019\000\000\000\000\000\000\000\020\000\019\000\
\020\000\020\000\000\000\000\000\020\000\000\000\020\000\022\000\
\020\000\000\000\000\000\000\000\022\000\020\000\022\000\022\000\
\000\000\000\000\022\000\000\000\022\000\021\000\022\000\000\000\
\000\000\000\000\021\000\022\000\021\000\021\000\000\000\000\000\
\021\000\000\000\021\000\023\000\021\000\000\000\000\000\000\000\
\023\000\021\000\023\000\023\000\000\000\024\000\023\000\000\000\
\023\000\000\000\023\000\000\000\024\000\024\000\000\000\023\000\
\024\000\000\000\024\000\000\000\024\000\000\000\000\000\000\000\
\000\000\024\000\033\000\034\000\035\000\036\000\037\000\038\000\
\000\000\000\000\000\000\000\000\000\000\039\000"

let yycheck = "\005\001\
\000\000\008\001\009\001\009\000\010\000\011\000\016\001\001\000\
\002\001\015\000\016\000\016\001\005\001\019\000\020\000\006\001\
\007\001\008\001\009\001\010\001\011\001\031\001\005\001\000\000\
\030\001\005\001\017\001\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\016\001\027\001\031\001\043\000\044\000\045\000\
\046\000\032\001\048\000\005\001\032\001\010\001\000\000\255\255\
\027\001\027\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\065\000\066\000\017\001\255\255\255\255\
\000\000\071\000\072\000\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\255\255\000\000\032\001\006\001\007\001\008\001\
\009\001\015\001\255\255\012\001\018\001\255\255\255\255\255\255\
\022\001\000\000\024\001\255\255\026\001\255\255\028\001\029\001\
\255\255\031\001\032\001\006\001\007\001\008\001\009\001\000\000\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\015\001\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\024\001\255\255\026\001\000\000\028\001\029\001\255\255\031\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\000\000\255\255\017\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\025\001\255\255\255\255\255\255\000\000\
\017\001\255\255\255\255\255\255\255\255\255\255\023\001\255\255\
\255\255\000\000\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\000\000\255\255\255\255\017\001\
\255\255\255\255\020\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\027\001\255\255\006\001\007\001\255\255\
\032\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\017\001\255\255\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\255\255\006\001\007\001\255\255\032\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\027\001\010\001\011\001\012\001\255\255\032\001\255\255\
\255\255\017\001\255\255\019\001\020\001\010\001\011\001\023\001\
\255\255\025\001\255\255\027\001\017\001\255\255\019\001\020\001\
\032\001\255\255\023\001\255\255\025\001\012\001\027\001\255\255\
\255\255\255\255\017\001\032\001\019\001\020\001\255\255\255\255\
\023\001\255\255\025\001\012\001\027\001\255\255\255\255\255\255\
\017\001\032\001\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\012\001\027\001\255\255\255\255\255\255\017\001\032\001\
\019\001\020\001\255\255\255\255\023\001\255\255\025\001\012\001\
\027\001\255\255\255\255\255\255\017\001\032\001\019\001\020\001\
\255\255\255\255\023\001\255\255\025\001\012\001\027\001\255\255\
\255\255\255\255\017\001\032\001\019\001\020\001\255\255\255\255\
\023\001\255\255\025\001\012\001\027\001\255\255\255\255\255\255\
\017\001\032\001\019\001\020\001\255\255\012\001\023\001\255\255\
\025\001\255\255\027\001\255\255\019\001\020\001\255\255\032\001\
\023\001\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\032\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001"

let yynames_const = "\
  UNIT\000\
  TRUE\000\
  FALSE\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EQUAL\000\
  LB\000\
  RB\000\
  LBLOCK\000\
  RBLOCK\000\
  NOT\000\
  COLONEQ\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  END\000\
  WHILE\000\
  DO\000\
  FOR\000\
  TO\000\
  LET\000\
  IN\000\
  READ\000\
  WRITE\000\
  PROC\000\
  LP\000\
  RP\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                ( _1 )
# 313 "parser.ml"
               : K.K.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                 ( _2 )
# 320 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
         (K.K.UNIT)
# 326 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 53 "parser.mly"
                ( K.K.NUM (-_2) )
# 333 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 54 "parser.mly"
          ( K.K.NUM (_1) )
# 340 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
           ( K.K.TRUE )
# 346 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
            ( K.K.FALSE )
# 352 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
            ( K.K.UNIT )
# 358 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
         ( K.K.VAR (_1) )
# 365 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                    ( K.K.CALLV (_1, _3) )
# 373 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                     ( K.K.ADD (_1, _3) )
# 381 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                       (K.K.SUB (_1,_3) )
# 389 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                     ( K.K.MUL (_1,_3) )
# 397 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                      ( K.K.DIV (_1,_3) )
# 405 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                      ( K.K.EQUAL (_1,_3) )
# 413 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                   ( K.K.LESS (_1,_3) )
# 421 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                      ( match (_1,_3) with (K.K.VAR f, K.K.VAR x) -> K.K.CALLR (f, x) | _ -> raise Parsing.Parse_error)
# 429 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
               ( K.K.NOT (_2) )
# 436 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                      ( K.K.ASSIGN (_1,_3) )
# 444 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                          ( K.K.SEQ (_1,_3) )
# 452 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                                  ( K.K.IF (_2, _4, _6) )
# 461 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                         ( K.K.WHILE (_2, _4) )
# 469 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                                          ( K.K.FOR (_2, _4, _6, _8) )
# 479 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decl) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                       ( desugarLet(_2, _4) )
# 487 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "parser.mly"
              ( K.K.READ (_2) )
# 494 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                 ( K.K.WRITE (_2) )
# 501 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                      ( Val (_1, _3) )
# 509 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                                  (Fun (_2, _4, _7))
# 518 "parser.ml"
               : 'decl))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : K.K.exp)
;;
